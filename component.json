{
    "title": "AWS Organizations",
    "description": "AWS Organizations API Reference AWS Organizations is a web service that enables\nyou to consolidate your multiple AWS accounts into an organization and centrally\nmanage your accounts and their resources.\n\nThis guide provides descriptions of the Organizations API. For more information\nabout using this service, see the AWS Organizations User Guide\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html]\n.\n\n API Version \n\nThis version of the Organizations API Reference documents the Organizations API\nversion 2016-11-28.\n\nAs an alternative to using the API directly, you can use one of the AWS SDKs,\nwhich consist of libraries and sample code for various programming languages and\nplatforms (Java, Ruby, .NET, iOS, Android, and more). The SDKs provide a\nconvenient way to create programmatic access to AWS Organizations. For example,\nthe SDKs take care of cryptographically signing requests, managing errors, and\nretrying requests automatically. For more information about the AWS SDKs,\nincluding how to download and install them, see Tools for Amazon Web Services\n[http://aws.amazon.com/tools/].\n\nWe recommend that you use the AWS SDKs to make programmatic API calls to\nOrganizations. However, you also can use the Organizations Query API to make\ndirect calls to the Organizations web service. To learn more about the\nOrganizations Query API, see Making Query Requests\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_query-requests.html] \nin the AWS Organizations User Guide. Organizations supports GET and POST\nrequests for all actions. That is, the API does not require you to use GET for\nsome actions and POST for others. However, GET requests are subject to the\nlimitation size of a URL. Therefore, for operations that require larger sizes,\nuse a POST request.\n\n Signing Requests \n\nWhen you send HTTP requests to AWS, you must sign the requests so that AWS can\nidentify who sent them. You sign requests with your AWS access key, which\nconsists of an access key ID and a secret access key. We strongly recommend that\nyou do not create an access key for your root account. Anyone who has the access\nkey for your root account has unrestricted access to all the resources in your\naccount. Instead, create an access key for an IAM user account that has\nadministrative privileges. As another option, use AWS Security Token Service to\ngenerate temporary security credentials, and use those credentials to sign\nrequests. \n\nTo sign requests, we recommend that you use Signature Version 4\n[https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html]. If you\nhave an existing application that uses Signature Version 2, you do not have to\nupdate it to use Signature Version 4. However, some operations now require\nSignature Version 4. The documentation for operations that require version 4\nindicate this requirement. \n\nWhen you use the AWS Command Line Interface (AWS CLI) or one of the AWS SDKs to\nmake requests to AWS, these tools automatically sign the requests for you with\nthe access key that you specify when you configure the tools.\n\nIn this release, each organization can have only one root. In a future release,\na single organization will support multiple roots.\n\n Support and Feedback for AWS Organizations \n\nWe welcome your feedback. Send your comments to \nfeedback-awsorganizations@amazon.com [feedback-awsorganizations@amazon.com] or\npost your feedback and questions in the AWS Organizations support forum\n[http://forums.aws.amazon.com/forum.jspa?forumID=219]. For more information\nabout the AWS support forums, see Forums Help\n[http://forums.aws.amazon.com/help.jspa].\n\n Endpoint to Call When Using the CLI or the AWS API \n\nFor the current release of Organizations, you must specify the us-east-1 region\nfor all AWS API and CLI calls. You can do this in the CLI by using these\nparameters and commands:\n\n *  Use the following parameter with each command to specify both the endpoint\n   and its region:\n   \n    --endpoint-url https://organizations.us-east-1.amazonaws.com \n   \n   \n *  Use the default endpoint, but configure your default region with this\n   command:\n   \n    aws configure set default.region us-east-1 \n   \n   \n *  Use the following parameter with each command to specify the endpoint:\n   \n    --region us-east-1 \n   \n   \n\nFor the various SDKs used to call the APIs, see the documentation for the SDK of\ninterest to learn how to direct the requests to a specific endpoint. For more\ninformation, see Regions and Endpoints\n[https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region] in the AWS\nGeneral Reference. \n\n How examples are presented \n\nThe JSON returned by the AWS Organizations service as response to your requests\nis returned as a single long string without line breaks or formatting\nwhitespace. Both line breaks and whitespace are included in the examples in this\nguide to improve readability. When example input parameters also would result in\nlong strings that would extend beyond the screen, we insert line breaks to\nenhance readability. You should always submit the input as a single JSON text\nstring.\n\n Recording API Requests \n\nAWS Organizations supports AWS CloudTrail, a service that records AWS API calls\nfor your AWS account and delivers log files to an Amazon S3 bucket. By using\ninformation collected by AWS CloudTrail, you can determine which requests were\nsuccessfully made to Organizations, who made the request, when it was made, and\nso on. For more about AWS Organizations and its support for AWS CloudTrail, see \nLogging AWS Organizations Events with AWS CloudTrail\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html#orgs_cloudtrail-integration] \nin the AWS Organizations User Guide. To learn more about CloudTrail, including\nhow to turn it on and find your log files, see the AWS CloudTrail User Guide\n[https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html]\n.",
    "docsUrl": "https://docs.aws.amazon.com/organizations/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/organizations/2016-11-28/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://organizations.amazonaws.com/",
                    "http://organizations.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AcceptHandshake": {
            "main": "./lib/actions/AcceptHandshake.js",
            "title": "AcceptHandshake",
            "description": "Sends a response to the originator of a handshake agreeing to the action\nproposed by the handshake request. \n\nThis operation can be called only by the following principals when they also\nhave the relevant IAM permissions:\n\n *   Invitation to join or Approve all features request handshakes: only a\n   principal from the member account. \n   \n   The user who calls the API for an invitation to join must have the \n   organizations:AcceptHandshake permission. If you enabled all features in the\n   organization, then the user must also have the iam:CreateServiceLinkedRole \n   permission so that Organizations can create the required service-linked role\n   named AWSServiceRoleForOrganizations. For more information, see AWS\n   Organizations and Service-Linked Roles\n   [http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles] \n   in the AWS Organizations User Guide.\n   \n   \n *   Enable all features final confirmation handshake: only a principal from the\n   master account.\n   \n   For more information about invitations, see Inviting an AWS Account to Join\n   Your Organization\n   [https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html] \n   in the AWS Organizations User Guide. For more information about requests to\n   enable all features in the organization, see Enabling All Features in Your\n   Organization\n   [https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html] \n   in the AWS Organizations User Guide.\n   \n   \n\nAfter you accept a handshake, it continues to appear in the results of relevant\nAPIs for only 30 days. After that it is deleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AcceptHandshake.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AttachPolicy": {
            "main": "./lib/actions/AttachPolicy.js",
            "title": "AttachPolicy",
            "description": "Attaches a policy to a root, an organizational unit (OU), or an individual\naccount. How the policy affects accounts depends on the type of policy:\n\n *   Service control policy (SCP) - An SCP specifies what permissions can be\n   delegated to users in affected member accounts. The scope of influence for a\n   policy depends on what you attach the policy to:\n   \n    *  If you attach an SCP to a root, it affects all accounts in the\n      organization.\n      \n      \n    *  If you attach an SCP to an OU, it affects all accounts in that OU and in\n      any child OUs.\n      \n      \n    *  If you attach the policy directly to an account, then it affects only\n      that account.\n      \n      \n   \n   SCPs are JSON policies that specify the maximum permissions for an\n   organization or organizational unit (OU). When you attach one SCP to a higher\n   level root or OU, and you also attach a different SCP to a child OU or to an\n   account, the child policy can further restrict only the permissions that pass\n   through the parent filter and are available to the child. An SCP that is\n   attached to a child cannot grant a permission that is not already granted by\n   the parent. For example, imagine that the parent SCP allows permissions A, B,\n   C, D, and E. The child SCP allows C, D, E, F, and G. The result is that the\n   accounts affected by the child SCP are allowed to use only C, D, and E. They\n   cannot use A or B because they were filtered out by the child OU. They also\n   cannot use F and G because they were filtered out by the parent OU. They\n   cannot be granted back by the child SCP; child SCPs can only filter the\n   permissions they receive from the parent SCP.\n   \n   AWS Organizations attaches a default SCP named \"FullAWSAccess to every root,\n   OU, and account. This default SCP allows all services and actions, enabling\n   any new child OU or account to inherit the permissions of the parent root or\n   OU. If you detach the default policy, you must replace it with a policy that\n   specifies the permissions that you want to allow in that OU or account.\n   \n   For more information about how Organizations policies permissions work, see \n   Using Service Control Policies\n   [https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html] \n   in the AWS Organizations User Guide.\n   \n   \n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AttachPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CancelHandshake": {
            "main": "./lib/actions/CancelHandshake.js",
            "title": "CancelHandshake",
            "description": "Cancels a handshake. Canceling a handshake sets the handshake state to CANCELED. \n\nThis operation can be called only from the account that originated the\nhandshake. The recipient of the handshake can't cancel it, but can use \nDeclineHandshake instead. After a handshake is canceled, the recipient can no\nlonger respond to that handshake.\n\nAfter you cancel a handshake, it continues to appear in the results of relevant\nAPIs for only 30 days. After that it is deleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CancelHandshake.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateAccount": {
            "main": "./lib/actions/CreateAccount.js",
            "title": "CreateAccount",
            "description": "Creates an AWS account that is automatically a member of the organization whose\ncredentials made the request. This is an asynchronous request that AWS performs\nin the background. Because CreateAccount operates asynchronously, it can return\na successful completion message even though account initialization might still\nbe in progress. You might need to wait a few minutes before you can successfully\naccess the account. To check the status of the request, do one of the following:\n\n *  Use the OperationId response element from this operation to provide as a\n   parameter to the DescribeCreateAccountStatus operation.\n   \n   \n *  Check the AWS CloudTrail log for the CreateAccountResult event. For\n   information on using AWS CloudTrail with Organizations, see Monitoring the\n   Activity in Your Organization\n   [http://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html] \n   in the AWS Organizations User Guide. \n   \n   \n\n \n\nThe user who calls the API to create an account must have the \norganizations:CreateAccount permission. If you enabled all features in the\norganization, AWS Organizations will create the required service-linked role\nnamed AWSServiceRoleForOrganizations. For more information, see AWS\nOrganizations and Service-Linked Roles\n[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs] \nin the AWS Organizations User Guide.\n\nAWS Organizations preconfigures the new member account with a role (named \nOrganizationAccountAccessRole by default) that grants users in the master\naccount administrator permissions in the new member account. Principals in the\nmaster account can assume the role. AWS Organizations clones the company name\nand address information for the new account from the organization's master\naccount.\n\nThis operation can be called only from the organization's master account.\n\nFor more information about creating accounts, see Creating an AWS Account in\nYour Organization\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html] \nin the AWS Organizations User Guide. \n\n *  When you create an account in an organization using the AWS Organizations\n   console, API, or CLI commands, the information required for the account to\n   operate as a standalone account, such as a payment method and signing the end\n   user license agreement (EULA) is not automatically collected. If you must\n   remove an account from your organization later, you can do so only after you\n   provide the missing information. Follow the steps at To leave an organization\n   as a member account\n   [http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info] \n   in the AWS Organizations User Guide.\n   \n   \n *  If you get an exception that indicates that you exceeded your account limits\n   for the organization, contact AWS Support\n   [https://console.aws.amazon.com/support/home#/].\n   \n   \n *  If you get an exception that indicates that the operation failed because\n   your organization is still initializing, wait one hour and then try again. If\n   the error persists, contact AWS Support\n   [https://console.aws.amazon.com/support/home#/].\n   \n   \n *  Using CreateAccount to create multiple temporary accounts isn't recommended.\n   You can only close an account from the Billing and Cost Management Console,\n   and you must be signed in as the root user. For information on the\n   requirements and process for closing an account, see Closing an AWS Account\n   [http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html] \n   in the AWS Organizations User Guide.\n   \n   \n\nWhen you create a member account with this operation, you can choose whether to\ncreate the account with the IAM User and Role Access to Billing Information \nswitch enabled. If you enable it, IAM users and roles that have appropriate\npermissions can view billing information for the account. If you disable it,\nonly the account root user can access billing information. For information about\nhow to disable this switch for an account, see Granting Access to Your Billing\nInformation and Tools\n[https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateAccount.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateOrganization": {
            "main": "./lib/actions/CreateOrganization.js",
            "title": "CreateOrganization",
            "description": "Creates an AWS organization. The account whose user is calling the\nCreateOrganization operation automatically becomes the master account\n[https://docs.aws.amazon.com/IAM/latest/UserGuide/orgs_getting-started_concepts.html#account] \nof the new organization.\n\nThis operation must be called using credentials from the account that is to\nbecome the new organization's master account. The principal must also have the\nrelevant IAM permissions.\n\nBy default (or if you set the FeatureSet parameter to ALL), the new organization\nis created with all features enabled and service control policies automatically\nenabled in the root. If you instead choose to create the organization supporting\nonly the consolidated billing features by setting the FeatureSet parameter to \nCONSOLIDATED_BILLING\", then no policy types are enabled by default and you\ncannot use organization policies.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateOrganizationalUnit": {
            "main": "./lib/actions/CreateOrganizationalUnit.js",
            "title": "CreateOrganizationalUnit",
            "description": "Creates an organizational unit (OU) within a root or parent OU. An OU is a\ncontainer for accounts that enables you to organize your accounts to apply\npolicies according to your business requirements. The number of levels deep that\nyou can nest OUs is dependent upon the policy types enabled for that root. For\nservice control policies, the limit is five. \n\nFor more information about OUs, see Managing Organizational Units\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html] \nin the AWS Organizations User Guide.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateOrganizationalUnit.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreatePolicy": {
            "main": "./lib/actions/CreatePolicy.js",
            "title": "CreatePolicy",
            "description": "Creates a policy of a specified type that you can attach to a root, an\norganizational unit (OU), or an individual AWS account.\n\nFor more information about policies and their use, see Managing Organization\nPolicies\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html]\n.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreatePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeclineHandshake": {
            "main": "./lib/actions/DeclineHandshake.js",
            "title": "DeclineHandshake",
            "description": "Declines a handshake request. This sets the handshake state to DECLINED and\neffectively deactivates the request.\n\nThis operation can be called only from the account that received the handshake.\nThe originator of the handshake can use CancelHandshake instead. The originator\ncan't reactivate a declined request, but can re-initiate the process with a new\nhandshake request.\n\nAfter you decline a handshake, it continues to appear in the results of relevant\nAPIs for only 30 days. After that it is deleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeclineHandshake.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteOrganization": {
            "main": "./lib/actions/DeleteOrganization.js",
            "title": "DeleteOrganization",
            "description": "Deletes the organization. You can delete an organization only by using credentials from the master account. The organization must be empty of member accounts.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteOrganizationalUnit": {
            "main": "./lib/actions/DeleteOrganizationalUnit.js",
            "title": "DeleteOrganizationalUnit",
            "description": "Deletes an organizational unit (OU) from a root or another OU. You must first\nremove all accounts and child OUs from the OU that you want to delete.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteOrganizationalUnit.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeletePolicy": {
            "main": "./lib/actions/DeletePolicy.js",
            "title": "DeletePolicy",
            "description": "Deletes the specified policy from your organization. Before you perform this\noperation, you must first detach the policy from all organizational units (OUs),\nroots, and accounts.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeletePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeAccount": {
            "main": "./lib/actions/DescribeAccount.js",
            "title": "DescribeAccount",
            "description": "Retrieves Organizations-related information about the specified account.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeAccount.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeCreateAccountStatus": {
            "main": "./lib/actions/DescribeCreateAccountStatus.js",
            "title": "DescribeCreateAccountStatus",
            "description": "Retrieves the current status of an asynchronous request to create an account.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeCreateAccountStatus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeHandshake": {
            "main": "./lib/actions/DescribeHandshake.js",
            "title": "DescribeHandshake",
            "description": "Retrieves information about a previously requested handshake. The handshake ID\ncomes from the response to the original InviteAccountToOrganization operation\nthat generated the handshake.\n\nYou can access handshakes that are ACCEPTED, DECLINED, or CANCELED for only 30\ndays after they change to that state. They are then deleted and no longer\naccessible.\n\nThis operation can be called from any account in the organization.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeHandshake.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeOrganization": {
            "main": "./lib/actions/DescribeOrganization.js",
            "title": "DescribeOrganization",
            "description": "Retrieves information about the organization that the user's account belongs to.\n\nThis operation can be called from any account in the organization.\n\nEven if a policy type is shown as available in the organization, it can be\ndisabled separately at the root level with DisablePolicyType. Use ListRoots to\nsee the status of policy types for a specified root.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeOrganizationalUnit": {
            "main": "./lib/actions/DescribeOrganizationalUnit.js",
            "title": "DescribeOrganizationalUnit",
            "description": "Retrieves information about an organizational unit (OU).\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeOrganizationalUnit.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribePolicy": {
            "main": "./lib/actions/DescribePolicy.js",
            "title": "DescribePolicy",
            "description": "Retrieves information about a policy.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DetachPolicy": {
            "main": "./lib/actions/DetachPolicy.js",
            "title": "DetachPolicy",
            "description": "Detaches a policy from a target root, organizational unit (OU), or account. If\nthe policy being detached is a service control policy (SCP), the changes to\npermissions for IAM users and roles in affected accounts are immediate.\n\n Note: Every root, OU, and account must have at least one SCP attached. If you\nwant to replace the default FullAWSAccess policy with one that limits the\npermissions that can be delegated, then you must attach the replacement policy\nbefore you can remove the default one. This is the authorization strategy of \nwhitelisting\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_about-scps.html#orgs_policies_whitelist]\n. If you instead attach a second SCP and leave the FullAWSAccess SCP still\nattached, and specify \"Effect\": \"Deny\" in the second SCP to override the \n\"Effect\": \"Allow\" in the FullAWSAccess policy (or any other attached SCP), then\nyou are using the authorization strategy of blacklisting\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_about-scps.html#orgs_policies_blacklist]\n. \n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DetachPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisableAWSServiceAccess": {
            "main": "./lib/actions/DisableAWSServiceAccess.js",
            "title": "DisableAWSServiceAccess",
            "description": "Disables the integration of an AWS service (the service that is specified by \nServicePrincipal) with AWS Organizations. When you disable integration, the\nspecified service no longer can create a service-linked role\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html] \nin new accounts in your organization. This means the service can't perform\noperations on your behalf on any new accounts in your organization. The service\ncan still perform operations in older accounts until the service completes its\nclean-up from AWS Organizations.\n\n We recommend that you disable integration between AWS Organizations and the\nspecified AWS service by using the console or commands that are provided by the\nspecified service. Doing so ensures that the other service is aware that it can\nclean up any resources that are required only for the integration. How the\nservice cleans up its resources in the organization's accounts depends on that\nservice. For more information, see the documentation for the other AWS service.\n\n\n\nAfter you perform the DisableAWSServiceAccess operation, the specified service\ncan no longer perform operations in your organization's accounts unless the\noperations are explicitly permitted by the IAM policies that are attached to\nyour roles. \n\nFor more information about integrating other services with AWS Organizations,\nincluding the list of services that work with Organizations, see Integrating AWS\nOrganizations with Other AWS Services\n[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html] \nin the AWS Organizations User Guide.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisableAWSServiceAccess.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisablePolicyType": {
            "main": "./lib/actions/DisablePolicyType.js",
            "title": "DisablePolicyType",
            "description": "Disables an organizational control policy type in a root. A policy of a certain\ntype can be attached to entities in a root only if that type is enabled in the\nroot. After you perform this operation, you no longer can attach policies of the\nspecified type to that root or to any organizational unit (OU) or account in\nthat root. You can undo this by using the EnablePolicyType operation.\n\nThis operation can be called only from the organization's master account.\n\nIf you disable a policy type for a root, it still shows as enabled for the\norganization if all features are enabled in that organization. Use ListRoots to\nsee the status of policy types for a specified root. Use DescribeOrganization to\nsee the status of policy types in the organization.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisablePolicyType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnableAWSServiceAccess": {
            "main": "./lib/actions/EnableAWSServiceAccess.js",
            "title": "EnableAWSServiceAccess",
            "description": "Enables the integration of an AWS service (the service that is specified by \nServicePrincipal) with AWS Organizations. When you enable integration, you allow\nthe specified service to create a service-linked role\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html] \nin all the accounts in your organization. This allows the service to perform\noperations on your behalf in your organization and its accounts.\n\nWe recommend that you enable integration between AWS Organizations and the\nspecified AWS service by using the console or commands that are provided by the\nspecified service. Doing so ensures that the service is aware that it can create\nthe resources that are required for the integration. How the service creates\nthose resources in the organization's accounts depends on that service. For more\ninformation, see the documentation for the other AWS service.\n\nFor more information about enabling services to integrate with AWS\nOrganizations, see Integrating AWS Organizations with Other AWS Services\n[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html] \nin the AWS Organizations User Guide.\n\nThis operation can be called only from the organization's master account and\nonly if the organization has enabled all features\n[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html]\n.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnableAWSServiceAccess.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnableAllFeatures": {
            "main": "./lib/actions/EnableAllFeatures.js",
            "title": "EnableAllFeatures",
            "description": "Enables all features in an organization. This enables the use of organization\npolicies that can restrict the services and actions that can be called in each\naccount. Until you enable all features, you have access only to consolidated\nbilling, and you can't use any of the advanced account administration features\nthat AWS Organizations supports. For more information, see Enabling All Features\nin Your Organization\n[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html] \nin the AWS Organizations User Guide.\n\nThis operation is required only for organizations that were created explicitly\nwith only the consolidated billing features enabled. Calling this operation\nsends a handshake to every invited account in the organization. The feature set\nchange can be finalized and the additional features enabled only after all\nadministrators in the invited accounts approve the change by accepting the\nhandshake.\n\nAfter you enable all features, you can separately enable or disable individual\npolicy types in a root using EnablePolicyType and DisablePolicyType. To see the\nstatus of policy types in a root, use ListRoots.\n\nAfter all invited member accounts accept the handshake, you finalize the feature\nset change by accepting the handshake that contains \"Action\":\n\"ENABLE_ALL_FEATURES\". This completes the change.\n\nAfter you enable all features in your organization, the master account in the\norganization can apply policies on all member accounts. These policies can\nrestrict what users and even administrators in those accounts can do. The master\naccount can apply policies that prevent accounts from leaving the organization.\nEnsure that your account administrators are aware of this.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnableAllFeatures.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnablePolicyType": {
            "main": "./lib/actions/EnablePolicyType.js",
            "title": "EnablePolicyType",
            "description": "Enables a policy type in a root. After you enable a policy type in a root, you\ncan attach policies of that type to the root, any organizational unit (OU), or\naccount in that root. You can undo this by using the DisablePolicyType \noperation.\n\nThis operation can be called only from the organization's master account.\n\nYou can enable a policy type in a root only if that policy type is available in\nthe organization. Use DescribeOrganization to view the status of available\npolicy types in the organization.\n\nTo view the status of policy type in a root, use ListRoots.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnablePolicyType.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "InviteAccountToOrganization": {
            "main": "./lib/actions/InviteAccountToOrganization.js",
            "title": "InviteAccountToOrganization",
            "description": "Sends an invitation to another account to join your organization as a member\naccount. Organizations sends email on your behalf to the email address that is\nassociated with the other account's owner. The invitation is implemented as a \nHandshake whose details are in the response.\n\n *  You can invite AWS accounts only from the same seller as the master account.\n   For example, if your organization's master account was created by Amazon\n   Internet Services Pvt. Ltd (AISPL), an AWS seller in India, then you can only\n   invite other AISPL accounts to your organization. You can't combine accounts\n   from AISPL and AWS, or any other AWS seller. For more information, see \n   Consolidated Billing in India\n   [http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html]\n   .\n   \n   \n *  If you receive an exception that indicates that you exceeded your account\n   limits for the organization or that the operation failed because your\n   organization is still initializing, wait one hour and then try again. If the\n   error persists after an hour, then contact AWS Customer Support\n   [https://console.aws.amazon.com/support/home#/].\n   \n   \n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/InviteAccountToOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "LeaveOrganization": {
            "main": "./lib/actions/LeaveOrganization.js",
            "title": "LeaveOrganization",
            "description": "Removes a member account from its parent organization. This version of the\noperation is performed by the account that wants to leave. To remove a member\naccount as a user in the master account, use RemoveAccountFromOrganization \ninstead.\n\nThis operation can be called only from a member account in the organization.\n\n *  The master account in an organization with all features enabled can set\n   service control policies (SCPs) that can restrict what administrators of\n   member accounts can do, including preventing them from successfully calling \n   LeaveOrganization and leaving the organization. \n   \n   \n *  You can leave an organization as a member account only if the account is\n   configured with the information required to operate as a standalone account.\n   When you create an account in an organization using the AWS Organizations\n   console, API, or CLI commands, the information required of standalone\n   accounts is not automatically collected. For each account that you want to\n   make standalone, you must accept the End User License Agreement (EULA),\n   choose a support plan, provide and verify the required contact information,\n   and provide a current payment method. AWS uses the payment method to charge\n   for any billable (not free tier) AWS activity that occurs while the account\n   is not attached to an organization. Follow the steps at To leave an\n   organization when all required account information has not yet been provided\n   [http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info] \n   in the AWS Organizations User Guide.\n   \n   \n *  You can leave an organization only after you enable IAM user access to\n   billing in your account. For more information, see Activating Access to the\n   Billing and Cost Management Console\n   [http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate] \n   in the AWS Billing and Cost Management User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/LeaveOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAWSServiceAccessForOrganization": {
            "main": "./lib/actions/ListAWSServiceAccessForOrganization.js",
            "title": "ListAWSServiceAccessForOrganization",
            "description": "Returns a list of the AWS services that you enabled to integrate with your\norganization. After a service on this list creates the resources that it\nrequires for the integration, it can perform operations on your organization and\nits accounts.\n\nFor more information about integrating other services with AWS Organizations,\nincluding the list of services that currently work with Organizations, see \nIntegrating AWS Organizations with Other AWS Services\n[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html] \nin the AWS Organizations User Guide.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAWSServiceAccessForOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAccounts": {
            "main": "./lib/actions/ListAccounts.js",
            "title": "ListAccounts",
            "description": "Lists all the accounts in the organization. To request only the accounts in a\nspecified root or organizational unit (OU), use the ListAccountsForParent \noperation instead.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAccounts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAccountsForParent": {
            "main": "./lib/actions/ListAccountsForParent.js",
            "title": "ListAccountsForParent",
            "description": "Lists the accounts in an organization that are contained by the specified target\nroot or organizational unit (OU). If you specify the root, you get a list of all\nthe accounts that are not in any OU. If you specify an OU, you get a list of all\nthe accounts in only that OU, and not in any child OUs. To get a list of all\naccounts in the organization, use the ListAccounts operation.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAccountsForParent.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListChildren": {
            "main": "./lib/actions/ListChildren.js",
            "title": "ListChildren",
            "description": "Lists all of the organizational units (OUs) or accounts that are contained in\nthe specified parent OU or root. This operation, along with ListParents enables\nyou to traverse the tree structure that makes up this root.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListChildren.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListCreateAccountStatus": {
            "main": "./lib/actions/ListCreateAccountStatus.js",
            "title": "ListCreateAccountStatus",
            "description": "Lists the account creation requests that match the specified status that is\ncurrently being tracked for the organization.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListCreateAccountStatus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListHandshakesForAccount": {
            "main": "./lib/actions/ListHandshakesForAccount.js",
            "title": "ListHandshakesForAccount",
            "description": "Lists the current handshakes that are associated with the account of the\nrequesting user.\n\nHandshakes that are ACCEPTED, DECLINED, or CANCELED appear in the results of\nthis API for only 30 days after changing to that state. After that they are\ndeleted and no longer accessible.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called from any account in the organization.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListHandshakesForAccount.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListHandshakesForOrganization": {
            "main": "./lib/actions/ListHandshakesForOrganization.js",
            "title": "ListHandshakesForOrganization",
            "description": "Lists the handshakes that are associated with the organization that the\nrequesting user is part of. The ListHandshakesForOrganization operation returns\na list of handshake structures. Each structure contains details and status about\na handshake.\n\nHandshakes that are ACCEPTED, DECLINED, or CANCELED appear in the results of\nthis API for only 30 days after changing to that state. After that they are\ndeleted and no longer accessible.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListHandshakesForOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListOrganizationalUnitsForParent": {
            "main": "./lib/actions/ListOrganizationalUnitsForParent.js",
            "title": "ListOrganizationalUnitsForParent",
            "description": "Lists the organizational units (OUs) in a parent organizational unit or root.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListOrganizationalUnitsForParent.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListParents": {
            "main": "./lib/actions/ListParents.js",
            "title": "ListParents",
            "description": "Lists the root or organizational units (OUs) that serve as the immediate parent\nof the specified child OU or account. This operation, along with ListChildren \nenables you to traverse the tree structure that makes up this root.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.\n\nIn the current release, a child can have only a single parent.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListParents.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListPolicies": {
            "main": "./lib/actions/ListPolicies.js",
            "title": "ListPolicies",
            "description": "Retrieves the list of all policies in an organization of a specified type.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListPoliciesForTarget": {
            "main": "./lib/actions/ListPoliciesForTarget.js",
            "title": "ListPoliciesForTarget",
            "description": "Lists the policies that are directly attached to the specified target root,\norganizational unit (OU), or account. You must specify the policy type that you\nwant included in the returned list.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListPoliciesForTarget.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRoots": {
            "main": "./lib/actions/ListRoots.js",
            "title": "ListRoots",
            "description": "Lists the roots that are defined in the current organization.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.\n\nPolicy types can be enabled and disabled in roots. This is distinct from whether\nthey are available in the organization. When you enable all features, you make\npolicy types available for use in that organization. Individual policy types can\nthen be enabled and disabled in a root. To see the availability of a policy type\nin an organization, use DescribeOrganization.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRoots.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTargetsForPolicy": {
            "main": "./lib/actions/ListTargetsForPolicy.js",
            "title": "ListTargetsForPolicy",
            "description": "Lists all the roots, organizaitonal units (OUs), and accounts to which the\nspecified policy is attached.\n\nAlways check the NextToken response parameter for a null value when calling a \nList* operation. These operations can occasionally return an empty set of\nresults even when there are more results available. The NextToken response\nparameter value is null only when there are no more results to display.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTargetsForPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "MoveAccount": {
            "main": "./lib/actions/MoveAccount.js",
            "title": "MoveAccount",
            "description": "Moves an account from its current source parent root or organizational unit (OU)\nto the specified destination parent root or OU.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/MoveAccount.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemoveAccountFromOrganization": {
            "main": "./lib/actions/RemoveAccountFromOrganization.js",
            "title": "RemoveAccountFromOrganization",
            "description": "Removes the specified account from the organization.\n\nThe removed account becomes a stand-alone account that is not a member of any\norganization. It is no longer subject to any policies and is responsible for its\nown bill payments. The organization's master account is no longer charged for\nany expenses accrued by the member account after it is removed from the\norganization.\n\nThis operation can be called only from the organization's master account. Member\naccounts can remove themselves with LeaveOrganization instead.\n\nYou can remove an account from your organization only if the account is\nconfigured with the information required to operate as a standalone account.\nWhen you create an account in an organization using the AWS Organizations\nconsole, API, or CLI commands, the information required of standalone accounts\nis not automatically collected. For an account that you want to make standalone,\nyou must accept the End User License Agreement (EULA), choose a support plan,\nprovide and verify the required contact information, and provide a current\npayment method. AWS uses the payment method to charge for any billable (not free\ntier) AWS activity that occurs while the account is not attached to an\norganization. To remove an account that does not yet have this information, you\nmust sign in as the member account and follow the steps at To leave an\norganization when all required account information has not yet been provided\n[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info] \nin the AWS Organizations User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemoveAccountFromOrganization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateOrganizationalUnit": {
            "main": "./lib/actions/UpdateOrganizationalUnit.js",
            "title": "UpdateOrganizationalUnit",
            "description": "Renames the specified organizational unit (OU). The ID and ARN do not change.\nThe child OUs and accounts remain in place, and any attached policies of the OU\nremain attached. \n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateOrganizationalUnit.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdatePolicy": {
            "main": "./lib/actions/UpdatePolicy.js",
            "title": "UpdatePolicy",
            "description": "Updates an existing policy with a new name, description, or content. If any\nparameter is not supplied, that value remains unchanged. Note that you cannot\nchange a policy's type.\n\nThis operation can be called only from the organization's master account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdatePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}